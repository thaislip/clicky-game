{"version":3,"sources":["components/header/header.jsx","components/card/Card.jsx","components/card/GameOver.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","restartGame","className","onClick","Card","id","isFlipped","handleClick","cardNumber","flipSpeedBackToFront","flipSpeedFrontToBack","key","GameOver","App","state","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","event","preventDefault","cardId","target","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","isGameOver","every","element","index","array","this","map","PureComponent","reduce","preValue","current","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3921d32.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ restartGame }) => (\n  <div className=\"grid-header-container\">\n    <div className=\"justify-left timer\"></div>\n    <div className=\"justify-center game-status-text\"></div>\n    <div className=\"justify-end\">\n      <button onClick={restartGame} className=\"restart-button\">Restart Game</button>\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\nimport ReactCardFlip from \"react-card-flip\";\n\nconst Card = ({ id, isFlipped, handleClick, cardNumber }) => (\n  <ReactCardFlip isFlipped={isFlipped} flipSpeedBackToFront={1} flipSpeedFrontToBack={1} >\n    <button id={id} className={`card card-front ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"front\">\n      \n    </button>\n\n    <button id={id} className={`card card-back ${cardNumber !== -1 ? \"\" : \"hide-card\"}`} onClick={handleClick} key=\"back\">\n      { cardNumber }\n    </button>\n  </ReactCardFlip>\n);\n\nexport default Card;","\nimport React from 'react';\n\nconst GameOver = ({ restartGame }) => (\n  <div className=\"justify-center\">\n    <h1>Game Over!</h1>\n    <button className=\"restart-button\" onClick={restartGame}>Restart Game</button>\n  </div>\n);\n\nexport default GameOver;","import React, { PureComponent } from 'react';\nimport Header from './components/header/header';\nimport Card from './components/card/Card';\nimport GameOver from './components/card/GameOver';\n\nimport './styles/main.css';\n\nclass App extends PureComponent {\n\n  state = { \n    isFlipped: Array(16).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1\n  };\n\n  static duplicateCard = () => {\n    return [0,1,2,3,4,5,6,7].reduce((preValue, current, index, array) => {\n      return preValue.concat([current, current])\n    },[]);\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({ \n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }))\n      }, 1000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(16).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every((element, index, array) => element !== false);\n  };\n\n  render() {\n    return (\n     <div>\n       <Header restartGame={this.restartGame} />\n       { this.isGameOver() ? <GameOver restartGame={this.restartGame} /> :\n       <div className=\"grid-container\">\n          {\n            this.state.shuffledCard.map((cardNumber, index) => \n              <Card\n                key={index} \n                id={index} \n                cardNumber={cardNumber} \n                isFlipped={this.state.isFlipped[index]} \n                handleClick={this.handleClick}     \n              />\n            )\n          }\n        </div>\n       }\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}